1、Ubuntu重装
删除机械硬盘分区，EasyUEFI删除Ubuntu启动引导，EFI分区赋盘符，用记事本管理员身份打开，删除下面的Ubuntu文件夹，U盘重装。

2、更换国内源
1）备份原来的源
sudo cp /etc/apt/sources.list /etc/apt/sources_init.list
2）更换源
sudo gedit /etc/apt/sources.list

加入阿里源：
deb http://mirrors.aliyun.com/ubuntu/ xenial main
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main

deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main

deb http://mirrors.aliyun.com/ubuntu/ xenial universe
deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe

deb http://mirrors.aliyun.com/ubuntu/ xenial-security main
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main
deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe

3）更新源
sudo apt-get update
4）更新软件
sudo apt-get upgrade


3、安装配置搜狗拼音
1）官网下载64位安装包
2）
sudo add-apt-repository ppa:fcitx-team/nightly
sudo apt-get update
sudo apt-get install fcitx
sudo apt-get install fcitx-config-gtk
sudo apt-get install fcitx-table-all
sudo apt-get install im-switch
sudo dpkg -i sougoupinyin_xxxx.deb

如果出现缺少依赖项：
sudo apt-get -f install

重启后在System Settings中找到Text Entry，加入Sougou拼音，打开fcitx配置窗口，将Sogou拼音加入列表并移动到第一位。


4、E: 无法打开锁文件 /var/lib/dpkg/lock-frontend - open (13: 权限不够)E: 无法获取 dpkg 前端锁 (/var/lib/dpkg/lock-frontend)，请查看您是否正以 root 用户运行？

sudo + 原命令

5、搜狗拼音乱码
cd ~/.config
sudo rm -rf SogouPY* sogou*
重启

6、N卡驱动安装
sudo add-apt-repository ppa:graphics-drivers
sudo apt-get update
ubuntu-derivers devices
sudo apt-get install nvidia-410

7、opencv安装
1）https://opencv.org/releases/下载openc3.4.5sources文件并解压
2）安装cmake
sudo apt-get install cmake
3）安装依赖项
sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev
4）编译
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..
期间会下载IPPICV需要等待一段时间
sudo make
编译很久
sudo make install
5）配置编译环境，加入环境变量
sudo gedit /etc/ld.so.conf.d/opencv.conf
添加 /usr/local/lib
执行 sudo ldconfig 使命令生效

6）配置bash
sudo gedit ~/.bashrc
在末尾添加：
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH
执行 source ~./bashrc 使命令生效
sudo updatedb

7）测试

8、anaconda3安装配置
1）从清华源 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ 下载最新版本anaconda3安装包
2）bash xxx.sh安装anaconda3
3）搭建深度学习环境
① 新建虚拟环境
conda create pytorch python=3.7
conda create tensorflow python=3.7
② 安装常用包
包括pytorch tensorflow-gpu numpy scipy matplotlib pandas scikit-learn scikit-image等

9、clion安装
如果出现找不到桌面图标的情况
cd /usr/share/applications
sudo gedit clion.desktop 内容如下，保存就可以找到图标，安装包不能删

[Desktop Entry]
Encoding=UTF-8

Name=CLion

Comment=clion-2019.2.5

Exec=/home/pwh/Softwares/clion-2019.2.5/bin/clion.sh

Icon=/home/pwh/Softwares/clion-2019.2.5/bin/clion.svg

Categories=Application;Development;Java;IDE

Version=2019.2.5

Type=Application

#Terminal=1

10、pycharm安装
由于网站http://www.jetbrains.com/pycharm/download/#section=linux打不开，无法下载安装包，用另一种方法
sudo add-apt-repository ppa:mystic-mirage/pycharm
sudo apt-get update
sudo apt-get install pycharm-community
卸载方法：
sudo apt remove pycharm pycharm-community && sudo apt autoremove

11、配置orbslam2环境（将所有依赖项放在一个文件夹~/slam_dependence下，以方便管理
1）pangolin安装
安装依赖库
sudo apt-get install libglew-dev libpython2.7-dev libboost-dev libboost-thread-dev libboost-filesystem-dev -y
下载pangolin编译安装
git clone https://github.com/stevenlovegrove/Pangolin
cd Pangolin
mkdir build
cd build
cmake ..
sudo make
sudo make install

2）egine3
sudo apt-get install libeigen3-dev

不要像下面这样做了
# wget https://bitbucket.org/eigen/eigen/get/3.2.10.tar.bz2
# tar -xjf 3.2.10.tar.bz2
# mv eigen-eigen-b9cd8366d4e8/ eigen-3.2.10
# cd eigen-3.2.10
# mkdir build
# cd build
# cmake ..
# sudo make
# sudo make install


12、NAOqi python sdk环境配置
import naoqi的时候会报错libqipython.so: cannot open shared object file: No such file or directory
- 把sdk文件路径加入LD_LIBRARY_PATH中

还会报错找不到libboost_regex.so.1.55.0
- 这是缺少boost1.55.0库的原因
- 去这里下http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.tar.gz/download
- 解压进入文件夹后(必须在python2.7 gcc4.8 g++4.8)的环境下编译！
sudo apt-get install build-essential g++ python-dev autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev
./bootstrap.sh --prefix=/usr/
./b2
sudo ./bs install

如果用的是高版本的gcc，例如gcc5.4，还会报错出现symbol error，这是因为低版本的符号_ZN5boost13match_resultsIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS5_EEEE12maybe_assignERKS9_高版本已经不支持了，主要差异是在std::basic_string和std::__cxx11::basic_string中，通过查询相关文章，这是gcc5后使用的是std::__cxx11::basic_string，所以要切换gcc版本：
sudo apt-get install gcc-4.8 g++-4.8
用update-alternatives实现版本管理
1. 添加不同版本的gcc/g++
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5.4 40
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5.4 40
2. 查看已添加的版本并切换
sudo update-alternatives --config gcc
sudo update-alternatives --config g++


13、安装deepin-wine环境
sudo git clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu
sudo sh ./install.sh

14、安装deepin应用
http://mirrors.aliyun.com/deepin/pool/non-free/d/

15、使用查找命令find出现find: ‘/run/user/1000/gvfs’: Permission denied错误：
umount /run/user/1000/gvfs
rm -rf /run/user/1000/gvfs

16、使用命令sudo apt-cache search name模糊查找可安装软件包
17、使用命令sudo apt-get -f install安装缺少的依赖项
